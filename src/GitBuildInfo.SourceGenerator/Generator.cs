namespace GitBuildInfo.SourceGenerator;

internal class Generator
{
    private readonly GeneratorOptions options;
    private readonly GitInfo gitInfo;

    private Generator(GeneratorOptions options, GitInfo gitInfo)
    {
        this.options = options;
        this.gitInfo = gitInfo;
    }

    public static string CreateAndGenerateCode(GeneratorOptions options, GitInfo gitInfo, GeneratorExecutionContext context)
    {
        options.Validate(context);
        return $@"// <autogenerated/>
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Text;

namespace {options.RootNamespace}
{{
    internal class {options.ClassName}
    {{
        public static string Headdesc {{ get; }} = ""{gitInfo.GitHead}"";

        /// <summary>
        /// Gets the git commit hash as formatted by git rev-parse.
        /// </summary>
        /// <value>
        /// The git commit hash as formatted by git rev-parse.
        /// </value>
        public static string Commit {{ get; }} = ""{gitInfo.CommitHash}"";

        /// <summary>
        /// Gets the git branch name as formatted by git name-rev.
        /// </summary>
        /// <value>
        /// The git branch name as formatted by git name-rev.
        /// </value>
        public static string Branchname {{ get; }} = ""{gitInfo.GitBranch}"";

        /// <summary>
        /// Gets a value indicating whether the branch is dirty or
        /// clean based upon the string constructed by git describe.
        /// </summary>
        /// <value>
        /// A value indicating whether the branch is dirty or
        /// clean based upon the string constructed by git describe.
        /// </value>
        public static bool IsDirty => Headdesc.EndsWith(""-dirty"", StringComparison.Ordinal);

        /// <summary>
        /// Gets a value indicating whether the branch is the master
        /// branch or not based upon the string constructed by
        /// git name-rev. This also returns true if the branch is main as well.
        /// </summary>
        /// <value>
        /// A value indicating whether the branch is the master
        /// branch or not based upon the string constructed by
        /// git name-rev. This also returns true if the branch is main as well.
        /// </value>
        [Obsolete(""Use GitInformation.IsMain instead. This will be removed in a future release. This is because most people using git are abandoning the use of master as the default branch name for the name of main. To prevent breakage I suggest you rename your default branch from master to main today."")]
        [ExcludeFromCodeCoverage]
        public static bool IsMaster => Branchname.Equals(""master"", StringComparison.Ordinal) || IsMain;

        /// <summary>
        /// Gets a value indicating whether the branch is the main
        /// branch or not based upon the string constructed by
        /// git name-rev.
        /// </summary>
        /// <value>
        /// A value indicating whether the branch is the main
        /// branch or not based upon the string constructed by
        /// git name-rev.
        /// </value>
        public static bool IsMain => Branchname.Equals(""main"", StringComparison.Ordinal);

        /// <summary>
        /// Gets a value indicating whether refs point to a stable tag release.
        /// </summary>
        /// <value>
        /// A value indicating whether refs point to a stable tag release.
        /// </value>
        public static bool IsTag => Headdesc.StartsWith(""tags/"", StringComparison.Ordinal);
    }}
}}

";
    }
}
